from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from config import BOT_TOKEN, ADMIN_ID, ADMIN_USERNAME, CHANNELS
from utils import (
    load_db, search_movies, add_movie, add_genre,
    increment_views, delete_movie, save_db, check_user_subscriptions
)
import logging

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
start_kb = ReplyKeyboardMarkup(resize_keyboard=True)
start_kb.add("üé¨ –ñ–∞–Ω—Ä—ã", "üîç –ü–æ–∏—Å–∫", "üìà –¢–û–ü 5 —Ñ–∏–ª—å–º–æ–≤")

@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    if await check_user_subscriptions(user_id, bot):
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=start_kb)
    else:
        kb = InlineKeyboardMarkup(row_width=1)
        text = (
    "‚ùóÔ∏è –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –≤—Å–µ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:\n"
    "üì© –ï—Å–ª–∏ –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω—É: @kinotuts\n"
)
        for i, ch in enumerate(CHANNELS, start=1):
            ch_clean = ch.strip('@')
            text += f"\nüì¢ –ü–æ–¥–ø–∏—Å–∫–∞ {i}"
            kb.add(InlineKeyboardButton(text=f"–ü–æ–¥–ø–∏—Å–∫–∞ {i}", url=f"https://t.me/{ch_clean}"))
        kb.add(InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subs"))
        await message.answer(text.strip() + "\n\n‚¨áÔ∏è –ö–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "check_subs")
async def check_subs_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if await check_user_subscriptions(user_id, bot):
        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
        await bot.send_message(chat_id=user_id, text="‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=start_kb)
    else:
        await callback_query.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞. –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", show_alert=True)

@dp.message_handler(commands=["addmovie"])
async def addmovie_handler(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
    await message.answer(
        "–§–æ—Ä–º–∞—Ç:\n"
        "–ù–∞–∑–≤–∞–Ω–∏–µ | –ñ–∞–Ω—Ä | –ì–æ–¥ | –°—Å—ã–ª–∫–∞ | –û–ø–∏—Å–∞–Ω–∏–µ | –ü–æ—Å—Ç–µ—Ä (URL)\n"
        "–ö–∞–∂–¥—ã–π —Ñ–∏–ª—å–º ‚Äî —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.\n"
        "–ï—Å–ª–∏ –ø–æ—Å—Ç–µ—Ä–∞ –Ω–µ—Ç ‚Äî –æ—Å—Ç–∞–≤—å –ø–æ–ª–µ –ø—É—Å—Ç—ã–º."
    )

@dp.message_handler(lambda m: m.text == "üé¨ –ñ–∞–Ω—Ä—ã")
async def show_genres(message: types.Message):
    db = load_db()
    if not db["genres"]:
        return await message.answer("–ñ–∞–Ω—Ä—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
    kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    for genre in db["genres"]:
        kb.add(genre)
    kb.add("üîô –ù–∞–∑–∞–¥")
    await message.answer("–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä:", reply_markup=kb)

@dp.message_handler(lambda m: m.text == "üîô –ù–∞–∑–∞–¥")
async def go_back(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=start_kb)

@dp.message_handler(lambda m: m.text == "üîç –ü–æ–∏—Å–∫")
async def ask_query(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:")

@dp.message_handler(lambda m: m.text == "üìà –¢–û–ü 5 —Ñ–∏–ª—å–º–æ–≤")
async def show_top_movies(message: types.Message):
    db = load_db()
    sorted_movies = sorted(db["movies"], key=lambda x: x["views"], reverse=True)[:5]
    if not sorted_movies:
        return await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤.")
    for movie in sorted_movies:
        await send_movie_card(message.chat.id, movie)

@dp.message_handler()
async def handle_input(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å–º–æ–≤
    if "|" in text and user_id == ADMIN_ID:
        lines = text.strip().splitlines()
        success, fail, duplicate = 0, 0, 0
        for line in lines:
            try:
                parts = list(map(str.strip, line.split("|")))
                if len(parts) == 6:
                    title, genre, year, link, desc, poster = parts
                elif len(parts) == 5:
                    title, genre, year, link, desc = parts
                    poster = ""
                else:
                    fail += 1
                    continue

                db = load_db()
                if any(m for m in db["movies"] if m["title"].lower() == title.lower() and m["year"] == year):
                    duplicate += 1
                    continue

                if genre not in db["genres"]:
                    db["genres"].append(genre)
                    save_db(db)

                add_movie(title, genre, link, desc, year, poster)
                success += 1
            except:
                fail += 1

        return await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {success}, ‚ùå –û—à–∏–±–æ–∫: {fail}, ‚ö†Ô∏è –£–∂–µ –≤ –±–∞–∑–µ: {duplicate}")

    # –ü–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä–∞–º
    db = load_db()
    if text in db["genres"]:
        genre_movies = [m for m in db["movies"] if m["genre"] == text]
        if not genre_movies:
            return await message.answer("–§–∏–ª—å–º—ã —ç—Ç–æ–≥–æ –∂–∞–Ω—Ä–∞ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        for movie in genre_movies[:7]:
            await send_movie_card(message.chat.id, movie)
        return

    # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    results = search_movies(text)
    if not results:
        return await message.answer(f"–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω—É {ADMIN_USERNAME}, —á—Ç–æ–±—ã –º—ã –µ–≥–æ –¥–æ–±–∞–≤–∏–ª–∏.")
    for movie in results:
        await send_movie_card(message.chat.id, movie)
        increment_views(movie)

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ–∏–ª—å–º–∞
async def send_movie_card(chat_id, movie):
    text = (
        f"üé¨ {movie['title']} ({movie['year']})\n"
        f"üé≠ –ñ–∞–Ω—Ä: {movie['genre']}\n\n"
        f"üí¨ {movie['description']}\n\n"
        f"–°–º–æ—Ç—Ä–µ—Ç—å —Ç—É—Ç üëáüëáüëá\n"
        f"üîó {movie['link']}\n\n"
        f"‚ùóÔ∏è–ï—Å–ª–∏ —Ñ–∏–ª—å–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî —Å–æ–æ–±—â–∏: {ADMIN_USERNAME}"
    )
    if movie.get("poster"):
        await bot.send_photo(chat_id, photo=movie["poster"], caption=text)
    else:
        await bot.send_message(chat_id, text)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
